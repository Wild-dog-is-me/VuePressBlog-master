{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{297:function(s,t,a){\"use strict\";a.r(t);var e=a(10),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[t(\"h3\",{attrs:{id:\"redis\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis\"}},[s._v(\"#\")]),s._v(\" Redis\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"_1、redis概述\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、redis概述\"}},[s._v(\"#\")]),s._v(\" 1、Redis概述\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"redis介绍\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis介绍\"}},[s._v(\"#\")]),s._v(\" Redis介绍\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"Redis是一个开源的key-value存储系统。\")]),s._v(\" \"),t(\"li\",[s._v(\"和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。\")]),s._v(\" \"),t(\"li\",[s._v(\"这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。\")]),s._v(\" \"),t(\"li\",[s._v(\"在此基础上，Redis支持各种不同方式的排序。\")]),s._v(\" \"),t(\"li\",[s._v(\"与memcached一样，为了保证效率，数据都是缓存在内存中。\")]),s._v(\" \"),t(\"li\",[s._v(\"区别的是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。\")]),s._v(\" \"),t(\"li\",[s._v(\"并且在此基础上实现了master-slave(主从)同步。\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#\"}},[s._v(\"#\")])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"配合关系型数据库做高速缓存\")])]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"高频次，热门访问的数据，降低数据库IO。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"分布式架构，做session共享。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/627f6b99094754312977975c.png\",alt:\"image-20220514164304374\"}})])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"多样的数据结构存储持久化数据\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/627f6bd4094754312978524e.png\",alt:\"image-20220514164403546\"}})])])]),s._v(\" \"),t(\"p\",[s._v(\"相关技术\\nRedis 使用的是单线程 + 多路 IO 复用技术：\")]),s._v(\" \"),t(\"p\",[s._v(\"多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用 select 和 poll 函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）。\")]),s._v(\" \"),t(\"p\",[s._v(\"串行 vs 多线程 + 锁（memcached） vs 单线程 + 多路 IO 复用 (Redis)（与 Memcache 三点不同：支持多数据类型，支持持久化，单线程 + 多路 IO 复用） 。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"_2、redis安装\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、redis安装\"}},[s._v(\"#\")]),s._v(\" 2、Redis安装\")]),s._v(\" \"),t(\"p\",[s._v(\"1、下载安装包\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"wget\")]),s._v(\" http://download.redis.io/releases/redis-6.0.6.tar.gz\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/627f6d9b09475431297dc17c.png\",alt:\"image-20220514165138305\"}})]),s._v(\" \"),t(\"p\",[s._v(\"下载完成以后我们可以看到如下，其中redis-6.6.6.tar.gz就是我们的目标文件。\")]),s._v(\" \"),t(\"p\",[s._v(\"2、解压安装包\")]),s._v(\" \"),t(\"p\",[s._v(\"我们一般将程序的安装包放在opt目录下，所以我们将下载好的安装包移动到opt目录下，并解压。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"mv\")]),s._v(\" redis-6.0.6.tar.gz /opt\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"tar\")]),s._v(\" -zxvf redis-6.0.6.tar.gz\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\")])]),t(\"p\",[s._v(\"解压完成以后，文件目录如下。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/627f6e2509475431297f87ac.png\",alt:\"image-20220514165357054\"}})]),s._v(\" \"),t(\"p\",[s._v(\"3、进入解压过后的文件夹\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\"cd\")]),s._v(\" redis-6.0.6\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/627f6e75094754312980873d.png\",alt:\"image-20220514165516769\"}})]),s._v(\" \"),t(\"p\",[s._v(\"4、基本的环境安装\")]),s._v(\" \"),t(\"p\",[s._v(\"如果没有gcc环境，需要执行以下命令。\\n\"),t(\"code\",[s._v(\"yum install gcc-c++\")]),s._v(\"\\n如果有，则直接执行\"),t(\"code\",[s._v(\"make\")]),s._v(\"、\"),t(\"code\",[s._v(\"make install\")]),s._v(\"命令。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/627f6f3e0947543129831bdb.png\",alt:\"image-20220514165838158\"}})]),s._v(\" \"),t(\"p\",[s._v(\"5、默认安装路径\")]),s._v(\" \"),t(\"p\",[s._v(\"默认的安装路径一般都是\"),t(\"code\",[s._v(\"usr/local/bin\")]),s._v(\"，我们进入到这个目录。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/627f6f75094754312983bf5f.png\",alt:\"image-20220514165932980\"}})]),s._v(\" \"),t(\"p\",[s._v(\"可以看到，已经有了redis服务\")]),s._v(\" \"),t(\"p\",[s._v(\"6、将配置文件复制粘贴到另一个目录下\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"mkdir\")]),s._v(\" config \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 创建文件夹\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"cp\")]),s._v(\" /opt/redis-6.0.6/redis.conf config \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 将/opt目录下redis配置文件拷贝到config目录下\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\")])]),t(\"p\",[s._v(\"这样做的好处是原生的配置文件不动，我们以后做修改就在复制后的配置文件下改动就可以了。\")]),s._v(\" \"),t(\"p\",[s._v(\"7、redis的后台不是默认启动的，我们需要修改配置文件\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"vim\")]),s._v(\" redis.conf\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/627f75cd094754312997b07a.png\",alt:\"image-20220514172636648\"}})]),s._v(\" \"),t(\"p\",[s._v(\"8、启动redis服务\")]),s._v(\" \"),t(\"p\",[s._v(\"通过指定的配置文件启动\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[s._v(\"redis-server /config/redis.conf\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"h2\",{attrs:{id:\"_3、redis常用五大数据类型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、redis常用五大数据类型\"}},[s._v(\"#\")]),s._v(\" 3、Redis常用五大数据类型\")]),s._v(\" \"),t(\"p\",[s._v(\"redis常见数据类型操作命令  \"),t(\"a\",{attrs:{href:\"http://www.redis.cn/commands.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"网页链接\"),t(\"OutboundLink\")],1)]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_3-1-redis键-key\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-redis键-key\"}},[s._v(\"#\")]),s._v(\" 3.1 Redis键（key）\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[s._v(\"keys *查看当前库所有key    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"匹配：keys *1\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\nexists key判断某个key是否存在\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\"type\")]),s._v(\" key 查看你的key是什么类型\\ndel key       删除指定的key数据\\nunlink key   根据value选择非阻塞删除\\n仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。\\nexpire key \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),s._v(\"   \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"10\")]),s._v(\"秒钟：为给定的key设置过期时间\\nttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期\\n\\nselect命令切换数据库\\ndbsize查看当前数据库的key的数量\\nflushdb清空当前库\\nflushall通杀全部库\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\")])]),t(\"h3\",{attrs:{id:\"_3-2-redis字符串-string\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-redis字符串-string\"}},[s._v(\"#\")]),s._v(\" 3.2 Redis字符串(String)\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"简介\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介\"}},[s._v(\"#\")]),s._v(\" 简介\")]),s._v(\" \"),t(\"p\",[s._v(\"String是\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis最基本的类型，可以理解成与Memcached一模一样的类型，一个key对应一个value。\")]),s._v(\" \"),t(\"p\",[s._v(\"String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。\")]),s._v(\" \"),t(\"p\",[s._v(\"String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"常用命令\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用命令\"}},[s._v(\"#\")]),s._v(\" 常用命令\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"set  \"),t(\"key\",[t(\"value\",[s._v(\"添加键值对\")])],1)],1)]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62805a600947543129e534b5.png\",alt:\"image-20220515094151301\"}})]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"*NX：当数据库中key不存在时，可以将key-value添加数据库\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"*XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"*EX：key的超时秒数\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"*PX：key的超时毫秒数，与EX互斥\")])])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"get  \"),t(\"key\",[s._v(\"查询对应键值\")])],1)]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"append  \"),t(\"key\",[t(\"value\",[s._v(\"将给定的\"),t(\"value\",[s._v(\" 追加到原值的末尾\")])],1)],1)],1)]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"strlen  \"),t(\"key\",[s._v(\"获得值的长度\")])],1)]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"setnx  \"),t(\"key\",[t(\"value\",[s._v(\"只有在 key 不存在时   设置 key 的值\")])],1)],1)]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"incr  \"),t(\"key\")],1)]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"将 key 中储存的数字值增1\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"只能对数字值操作，如果为空，新增值为1\")])])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"decr  \"),t(\"key\")],1)]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"将 key 中储存的数字值减1\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"只能对数字值操作，如果为空，新增值为-1\")])])]),s._v(\" \"),t(\"p\",[s._v(\"incrby / decrby  \"),t(\"key\",[s._v(\"<步长>将 key 中储存的数字值增减。自定义步长。\")])],1),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"原子性\")])]),s._v(\" \"),t(\"p\",[s._v(\"所谓\"),t(\"strong\",[s._v(\"原子\")]),s._v(\"操作是指不会被线程调度机制打断的操作；\")]),s._v(\" \"),t(\"p\",[s._v(\"这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。\")]),s._v(\" \"),t(\"p\",[s._v('（1）在单线程中， 能够在单条指令中完成的操作都可以认为是\"原子操作\"，因为中断只能发生于指令之间。')]),s._v(\" \"),t(\"p\",[s._v(\"（2）在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis单命令的原子性主要得益于Redis的单线程。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"mset  \"),t(\"key1\",[t(\"value1\",[t(\"key2\",[t(\"value2\",[s._v(\"  .....\")])],1)],1)],1)],1)]),s._v(\" \"),t(\"p\",[s._v(\"同时设置一个或多个 key-value对\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"mget  \"),t(\"key1\",[t(\"key2\",[t(\"key3\",[s._v(\" .....\")])],1)],1)],1)]),s._v(\" \"),t(\"p\",[s._v(\"同时获取一个或多个 value\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"msetnx \"),t(\"key1\",[t(\"value1\",[t(\"key2\",[t(\"value2\",[s._v(\"  .....\")])],1)],1)],1)],1)]),s._v(\" \"),t(\"p\",[s._v(\"同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。\")]),s._v(\" \"),t(\"p\",[s._v(\"根据原子性 ，有一个失败则都失败。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"getrange  \"),t(\"key\",[s._v(\"<起始位置><结束位置>\")])],1)]),s._v(\" \"),t(\"p\",[s._v(\"获得值的范围，类似java中的substring，****前包，后包****\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"setrange  \"),t(\"key\",[s._v(\"<起始位置>\"),t(\"value\")],1)],1)]),s._v(\" \"),t(\"p\",[s._v(\"用 \"),t(\"value\",[s._v(\"  覆写\"),t(\"key\",[s._v(\"所储存的字符串值，从<起始位置>开始(****索引从0开始****)。\")])],1)],1),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"setex  \"),t(\"key\",[s._v(\"<过期时间>\"),t(\"value\")],1)],1)]),s._v(\" \"),t(\"p\",[s._v(\"设置键值的同时，设置过期时间，单位秒。\")]),s._v(\" \"),t(\"p\",[s._v(\"getset \"),t(\"key\",[t(\"value\")],1)],1),s._v(\" \"),t(\"p\",[s._v(\"以新换旧，设置了新值同时获得旧值。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_3-3-redis列表-list\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-redis列表-list\"}},[s._v(\"#\")]),s._v(\" 3.3 Redis列表（List）\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"简介-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介-2\"}},[s._v(\"#\")]),s._v(\" 简介\")]),s._v(\" \"),t(\"p\",[s._v(\"单键多值\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。\")]),s._v(\" \"),t(\"p\",[s._v(\"它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62806dd1094754312920c72c.png\",alt:\"image-20220515110448246\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"常用命令-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用命令-2\"}},[s._v(\"#\")]),s._v(\" 常用命令\")]),s._v(\" \"),t(\"p\",[s._v(\"lpush/rpush  \"),t(\"key\",[t(\"value1\",[t(\"value2\",[t(\"value3\",[s._v(\" .... 从左边/右边插入一个或多个值。\")])],1)],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"lpop/rpop  \"),t(\"key\",[s._v(\"从左边/右边吐出一个值。值在键在，值光键亡。\")])],1),s._v(\" \"),t(\"p\",[s._v(\"rpoplpush  \"),t(\"key1\",[t(\"key2\",[s._v(\"从\"),t(\"key1\",[s._v(\"列表右边吐出一个值，插到\"),t(\"key2\",[s._v(\"列表左边。\")])],1)],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"lrange \"),t(\"key\",[t(\"start\",[t(\"stop\")],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"按照索引下标获得元素(从左到右)\")]),s._v(\" \"),t(\"p\",[s._v(\"lrange mylist 0 -1  0左边第一个，-1右边第一个，（0-1表示获取所有）\")]),s._v(\" \"),t(\"p\",[s._v(\"lindex \"),t(\"key\",[t(\"index\",[s._v(\"按照索引下标获得元素(从左到右)\")])],1)],1),s._v(\" \"),t(\"p\",[s._v(\"llen \"),t(\"key\",[s._v(\"获得列表长度\")])],1),s._v(\" \"),t(\"p\",[s._v(\"linsert \"),t(\"key\",[s._v(\"  before \"),t(\"value\",[t(\"newvalue\",[s._v(\"在\"),t(\"value\",[s._v(\"的后面插入\"),t(\"newvalue\",[s._v(\"插入值\")])],1)],1)],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"lrem \"),t(\"key\",[t(\"n\",[t(\"value\",[s._v(\"从左边删除n个value(从左到右)\")])],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"lset\"),t(\"key\",[t(\"index\",[t(\"value\",[s._v(\"将列表key下标为index的值替换成value\")])],1)],1)],1),s._v(\" \"),t(\"h4\",{attrs:{id:\"数据结构\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据结构\"}},[s._v(\"#\")]),s._v(\" 数据结构\")]),s._v(\" \"),t(\"p\",[s._v(\"List的数据结构为快速链表quickList。\")]),s._v(\" \"),t(\"hr\"),s._v(\" \"),t(\"p\",[s._v(\"首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。\")]),s._v(\" \"),t(\"p\",[s._v(\"它将所有的元素紧挨着一起存储，分配的是一块连续的内存。\")]),s._v(\" \"),t(\"p\",[s._v(\"当数据量比较多的时候才会改成quicklist。\")]),s._v(\" \"),t(\"hr\"),s._v(\" \"),t(\"p\",[s._v(\"因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62807b7109475431294e023a.png\",alt:\"image-20220515120256985\"}})]),s._v(\" \"),t(\"p\",[s._v(\"Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_3-4-redis集合-set\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-4-redis集合-set\"}},[s._v(\"#\")]),s._v(\" 3.4 Redis集合（Set）\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"简介-3\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介-3\"}},[s._v(\"#\")]),s._v(\" 简介\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以\"),t(\"strong\",[s._v(\"自动去重\")]),s._v(\"的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的复杂度都是O(1)。\")]),s._v(\" \"),t(\"p\",[s._v(\"一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"常用命令-3\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用命令-3\"}},[s._v(\"#\")]),s._v(\" 常用命令\")]),s._v(\" \"),t(\"p\",[s._v(\"sadd \"),t(\"key\",[t(\"value1\",[t(\"value2\",[s._v(\" .....\")])],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略\")]),s._v(\" \"),t(\"p\",[s._v(\"smembers \"),t(\"key\",[s._v(\"取出该集合的所有值。\")])],1),s._v(\" \"),t(\"p\",[s._v(\"sismember \"),t(\"key\",[t(\"value\",[s._v(\"判断集合\"),t(\"key\",[s._v(\"是否为含有该\"),t(\"value\",[s._v(\"值，有1，没有0\")])],1)],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"scard\"),t(\"key\",[s._v(\"返回该集合的元素个数。\")])],1),s._v(\" \"),t(\"p\",[s._v(\"srem \"),t(\"key\",[t(\"value1\",[t(\"value2\",[s._v(\" .... 删除集合中的某个元素。\")])],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"spop \"),t(\"key\",[s._v(\"****随机从该集合中吐出一个值。****\")])],1),s._v(\" \"),t(\"p\",[s._v(\"srandmember \"),t(\"key\",[t(\"n\",[s._v(\"随机从该集合中取出n个值。不会从集合中删除 。\")])],1)],1),s._v(\" \"),t(\"p\",[s._v(\"smove \")]),t(\"source\"),t(\"destination\",[s._v(\"value把集合中一个值从一个集合移动到另一个集合\"),t(\"p\"),s._v(\" \"),t(\"p\",[s._v(\"sinter \"),t(\"key1\",[t(\"key2\",[s._v(\"返回两个集合的交集元素。\")])],1)],1),s._v(\" \"),t(\"p\",[s._v(\"sunion \"),t(\"key1\",[t(\"key2\",[s._v(\"返回两个集合的并集元素。\")])],1)],1),s._v(\" \"),t(\"p\",[s._v(\"sdiff \"),t(\"key1\",[t(\"key2\",[s._v(\"返回两个集合的****差集****元素(key1中的，不包含key2中的)\")])],1)],1),s._v(\" \"),t(\"h4\",{attrs:{id:\"数据结构-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据结构-2\"}},[s._v(\"#\")]),s._v(\" 数据结构\")]),s._v(\" \"),t(\"p\",[s._v(\"Set数据结构是dict字典，字典是用哈希表实现的。\")]),s._v(\" \"),t(\"hr\"),s._v(\" \"),t(\"p\",[s._v(\"Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_3-5-redis哈希-hash\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-5-redis哈希-hash\"}},[s._v(\"#\")]),s._v(\" 3.5 Redis哈希（Hash）\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"简介-4\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介-4\"}},[s._v(\"#\")]),s._v(\" 简介\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis hash 是一个键值对集合。\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。\")]),s._v(\" \"),t(\"p\",[s._v(\"类似Java里面的Map<String,Object>\")]),s._v(\" \"),t(\"p\",[s._v(\"用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储\")]),s._v(\" \"),t(\"p\",[s._v(\"主要有以下2种存储方式：\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280880209475431297d3a23.png\",alt:\"image-20220515125632291\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"常用命令-4\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用命令-4\"}},[s._v(\"#\")]),s._v(\" 常用命令\")]),s._v(\" \"),t(\"p\",[s._v(\"hset \"),t(\"key\",[t(\"field\",[t(\"value\",[s._v(\"给\"),t(\"key\",[s._v(\"集合中的  \"),t(\"field\",[s._v(\"键赋值\"),t(\"value\")],1)],1)],1)],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"hget \"),t(\"key1\",[t(\"field\",[s._v(\"从\"),t(\"key1\",[s._v(\"集合\"),t(\"field\",[s._v(\"取出 value\")])],1)],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"hmset \"),t(\"key1\",[t(\"field1\",[t(\"value1\",[t(\"field2\",[t(\"value2\",[s._v(\"... 批量设置hash的值\")])],1)],1)],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"hexists\"),t(\"key1\",[t(\"field\",[s._v(\"查看哈希表 key 中，给定域 field 是否存在。\")])],1)],1),s._v(\" \"),t(\"p\",[s._v(\"hkeys \"),t(\"key\",[s._v(\"列出该hash集合的所有field\")])],1),s._v(\" \"),t(\"p\",[s._v(\"hvals \"),t(\"key\",[s._v(\"列出该hash集合的所有value\")])],1),s._v(\" \"),t(\"p\",[s._v(\"hincrby \"),t(\"key\",[t(\"field\",[t(\"increment\",[s._v(\"为哈希表 key 中的域 field 的值加上增量 1  -1\")])],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"hsetnx \"),t(\"key\",[t(\"field\",[t(\"value\",[s._v(\"将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .\")])],1)],1)],1),s._v(\" \"),t(\"h4\",{attrs:{id:\"数据结构-3\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据结构-3\"}},[s._v(\"#\")]),s._v(\" 数据结构\")]),s._v(\" \"),t(\"p\",[s._v(\"Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"_3-6-redis有序集合\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-6-redis有序集合\"}},[s._v(\"#\")]),s._v(\" 3.6 Redis有序集合\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"简介-5\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介-5\"}},[s._v(\"#\")]),s._v(\" 简介\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。\")]),s._v(\" \"),t(\"p\",[s._v(\"不同之处是有序集合的每个成员都关联了一个****评分（score）****,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。\")]),s._v(\" \"),t(\"p\",[s._v(\"因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。\")]),s._v(\" \"),t(\"p\",[s._v(\"访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"常用命令-5\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用命令-5\"}},[s._v(\"#\")]),s._v(\" 常用命令\")]),s._v(\" \"),t(\"p\",[s._v(\"zadd  \"),t(\"key\",[t(\"score1\",[t(\"value1\",[t(\"score2\",[t(\"value2\",[s._v(\"…\")])],1)],1)],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"将一个或多个 member 元素及其 score 值加入到有序集 key 当中。\")]),s._v(\" \"),t(\"p\",[s._v(\"zrange \"),t(\"key\",[t(\"start\",[t(\"stop\",[s._v(\"  [WITHSCORES]\")])],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"返回有序集 key 中，下标在\"),t(\"start\",[t(\"stop\",[s._v(\"之间的元素\")])],1)],1),s._v(\" \"),t(\"p\",[s._v(\"带WITHSCORES，可以让分数一起和值返回到结果集。\")]),s._v(\" \"),t(\"p\",[s._v(\"zrangebyscore key minmax [withscores] [limit offset count]\")]),s._v(\" \"),t(\"p\",[s._v(\"返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。\")]),s._v(\" \"),t(\"p\",[s._v(\"zrevrangebyscore key maxmin [withscores] [limit offset count]\")]),s._v(\" \"),t(\"p\",[s._v(\"同上，改为从大到小排列。\")]),s._v(\" \"),t(\"p\",[s._v(\"zincrby \"),t(\"key\",[t(\"increment\",[t(\"value\",[s._v(\"    为元素的score加上增量\")])],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"zrem  \"),t(\"key\",[t(\"value\",[s._v(\"删除该集合下，指定值的元素\")])],1)],1),s._v(\" \"),t(\"p\",[s._v(\"zcount \"),t(\"key\",[t(\"min\",[t(\"max\",[s._v(\"统计该集合，分数区间内的元素个数\")])],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"zrank \"),t(\"key\",[t(\"value\",[s._v(\"返回该值在集合中的排名，从0开始。\")])],1)],1),s._v(\" \"),t(\"h4\",{attrs:{id:\"数据结构-4\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据结构-4\"}},[s._v(\"#\")]),s._v(\" 数据结构\")]),s._v(\" \"),t(\"p\",[s._v(\"SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map<String, Double>，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。\")]),s._v(\" \"),t(\"p\",[s._v(\"zset底层使用了两个数据结构\")]),s._v(\" \"),t(\"p\",[s._v(\"（1）hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。\")]),s._v(\" \"),t(\"p\",[s._v(\"（2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"跳跃表介绍\")])]),s._v(\" \"),t(\"p\",[s._v(\"有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。\")]),s._v(\" \"),t(\"p\",[s._v(\"实例\")]),s._v(\" \"),t(\"p\",[s._v(\"​\\t对比有序链表和跳跃表，从链表中查询出51\")]),s._v(\" \"),t(\"p\",[s._v(\"（1） 有序链表\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628091ad0947543129a0464c.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。\")]),s._v(\" \"),t(\"p\",[s._v(\"（2） 跳跃表\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628091ad0947543129a04682.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"从第2层开始，1节点比51节点小，向后比较。\")]),s._v(\" \"),t(\"p\",[s._v(\"21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层\")]),s._v(\" \"),t(\"p\",[s._v(\"在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下\")]),s._v(\" \"),t(\"p\",[s._v(\"在第0层，51节点为要查找的节点，节点被找到，共查找4次。\")]),s._v(\" \"),t(\"p\",[s._v(\"从此可以看出跳跃表比有序链表效率要高\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"_4、redis配置文件介绍\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4、redis配置文件介绍\"}},[s._v(\"#\")]),s._v(\" 4、Redis配置文件介绍\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"units单位\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#units单位\"}},[s._v(\"#\")]),s._v(\" Units单位\")]),s._v(\" \"),t(\"p\",[s._v(\"配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit\")]),s._v(\" \"),t(\"p\",[s._v(\"大小写不敏感\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628098e90947543129b96cfe.png\",alt:\"image-20220515140841165\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"incloudes-包含\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#incloudes-包含\"}},[s._v(\"#\")]),s._v(\" INCLOUDES 包含\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628099a80947543129bc15ae.png\",alt:\"image-20220515141151708\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"网络相关配置\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网络相关配置\"}},[s._v(\"#\")]),s._v(\" 网络相关配置\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"bind\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#bind\"}},[s._v(\"#\")]),s._v(\" bind\")]),s._v(\" \"),t(\"p\",[s._v(\"默认情况bind=127.0.0.1只能接受本机的访问请求\")]),s._v(\" \"),t(\"p\",[s._v(\"不写的情况下，无限制接受任何ip地址的访问\")]),s._v(\" \"),t(\"p\",[s._v(\"生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉\")]),s._v(\" \"),t(\"p\",[s._v(\"如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62809e8f0947543129ce64e8.png\",alt:\"image-20220515143247222\"}})]),s._v(\" \"),t(\"p\",[s._v(\"保存配置，停止服务，重启启动查看进程，不再是本机访问了。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"protected-mode\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#protected-mode\"}},[s._v(\"#\")]),s._v(\" Protected-mode\")]),s._v(\" \"),t(\"p\",[s._v(\"将本机访问保护模式设置no\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62809ee70947543129cfa00a.png\",alt:\"image-20220515143414921\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"port\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#port\"}},[s._v(\"#\")]),s._v(\" port\")]),s._v(\" \"),t(\"p\",[s._v(\"端口号 ，默认为6379\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62809f1e0947543129d06019.png\",alt:\"image-20220515143510197\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"tcp-backlog\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-backlog\"}},[s._v(\"#\")]),s._v(\" tcp-backlog\")]),s._v(\" \"),t(\"p\",[s._v(\"设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。\")]),s._v(\" \"),t(\"p\",[s._v(\"在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。\")]),s._v(\" \"),t(\"p\",[s._v(\"注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值（128），所以需要确认增大/proc/sys/net/core/somaxconn和/proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62809f480947543129d103e1.png\",alt:\"image-20220515143551743\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"timeout\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#timeout\"}},[s._v(\"#\")]),s._v(\" timeout\")]),s._v(\" \"),t(\"p\",[s._v(\"一个空闲的客户端维持多少秒会关闭，0表示关闭该功能。即永不关闭。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62809f6c0947543129d19146.png\",alt:\"image-20220515143627752\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"tcp-keepalive\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-keepalive\"}},[s._v(\"#\")]),s._v(\" Tcp-keepalive\")]),s._v(\" \"),t(\"p\",[s._v(\"对访问客户端的一种心跳检测，每个n秒检测一次。\")]),s._v(\" \"),t(\"p\",[s._v(\"单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60 。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a2d70947543129ddcb38.png\",alt:\"image-20220515145103339\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"general通用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#general通用\"}},[s._v(\"#\")]),s._v(\" GENERAL通用\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"daemonize\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#daemonize\"}},[s._v(\"#\")]),s._v(\" daemonize\")]),s._v(\" \"),t(\"p\",[s._v(\"是否为后台进程，设置为yes\")]),s._v(\" \"),t(\"p\",[s._v(\"守护进程，后台启动\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a3fc0947543129e20dfd.png\",alt:\"image-20220515145556036\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"pidfile\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#pidfile\"}},[s._v(\"#\")]),s._v(\" pidfile\")]),s._v(\" \"),t(\"p\",[s._v(\"存放pid文件的位置，每个实例会产生一个不同的pid文件\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a4230947543129e2981f.png\",alt:\"image-20220515145634541\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"loglevel\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#loglevel\"}},[s._v(\"#\")]),s._v(\" Loglevel\")]),s._v(\" \"),t(\"p\",[s._v(\"指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为\"),t(\"strong\",[s._v(\"notice\")])]),s._v(\" \"),t(\"p\",[s._v(\"四个级别根据使用阶段来选择，生产环境选择notice 或者warning\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a4520947543129e33e48.png\",alt:\"image-20220515145721720\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"logfile\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#logfile\"}},[s._v(\"#\")]),s._v(\" logfile\")]),s._v(\" \"),t(\"p\",[s._v(\"日志文件名称\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a4740947543129e3ba84.png\",alt:\"image-20220515145755733\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"database16\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#database16\"}},[s._v(\"#\")]),s._v(\" database16\")]),s._v(\" \"),t(\"p\",[s._v(\"设定库的数量 默认16，默认数据库为0，可以使用SELECT \"),t(\"dbid\",[s._v(\"命令在连接上指定数据库id\")])],1),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a4940947543129e43971.png\",alt:\"image-20220515145827534\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"serurity安全\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#serurity安全\"}},[s._v(\"#\")]),s._v(\" SERURITY安全\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"设置密码\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#设置密码\"}},[s._v(\"#\")]),s._v(\" 设置密码\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a4c90947543129e4fa18.png\",alt:\"image-20220515145920968\"}})]),s._v(\" \"),t(\"p\",[s._v(\"访问密码的查看、设置和取消\")]),s._v(\" \"),t(\"p\",[s._v(\"在命令中设置密码，只是临时的。重启redis服务器，密码就还原了。\")]),s._v(\" \"),t(\"p\",[s._v(\"永久设置，需要再配置文件中进行设置。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a4f90947543129e5b96a.png\",alt:\"image-20220515150009214\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"limits限制\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#limits限制\"}},[s._v(\"#\")]),s._v(\" LIMITS限制\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"max-clients\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#max-clients\"}},[s._v(\"#\")]),s._v(\" Max clients\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø 设置redis同时可以与多少个客户端进行连接。\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø 默认情况下为10000个客户端。\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø 如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a6360947543129ea0183.png\",alt:\"image-20220515150526320\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"maxmemory\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#maxmemory\"}},[s._v(\"#\")]),s._v(\" maxmemory\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø 建议****必须设置****，否则，将内存占满，造成服务器宕机\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø 设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø 如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø 但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a67c0947543129eb1212.png\",alt:\"image-20220515150635584\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"maxmemory-policy\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#maxmemory-policy\"}},[s._v(\"#\")]),s._v(\" maxmemory-policy\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø allkeys-lru：在所有集合key中，使用LRU算法移除key\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø allkeys-random：在所有集合key中，移除随机的key\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø noeviction：不进行移除。针对写操作，只是返回错误信息\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a6e10947543129ec89f3.png\",alt:\"image-20220515150817363\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"maxmemory-samples\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#maxmemory-samples\"}},[s._v(\"#\")]),s._v(\" maxmemory-samples\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø 设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个。\")]),s._v(\" \"),t(\"p\",[s._v(\"Ø 一般设置3到7的数字，数值越小样本越不准确，但性能消耗越小。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280a7360947543129edc0d5.png\",alt:\"image-20220515150942326\"}})]),s._v(\" \"),t(\"h2\",{attrs:{id:\"_5-redis的发布和订阅\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-redis的发布和订阅\"}},[s._v(\"#\")]),s._v(\" 5.Redis的发布和订阅\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"什么是发布和订阅\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是发布和订阅\"}},[s._v(\"#\")]),s._v(\" 什么是发布和订阅\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis 客户端可以订阅任意数量的频道。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"redis的发布和订阅\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis的发布和订阅\"}},[s._v(\"#\")]),s._v(\" Redis的发布和订阅\")]),s._v(\" \"),t(\"p\",[s._v(\"1、客户端可以订阅频道如下图\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280acbf094754312901df0a.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"2、当给这个频道发布消息后，消息就会发送给订阅的客户端\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280acbf094754312901decb.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"发布订阅命令行实现\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#发布订阅命令行实现\"}},[s._v(\"#\")]),s._v(\" 发布订阅命令行实现\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"1、 打开一个客户端订阅channel1\")])]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[s._v(\"SUBSCRIBE channel1\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280aff209475431290db34f.png\",alt:\"image-20220515154658208\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"2、打开另一个客户端，给channel1发布消息hello\")])]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[s._v(\"publish channel1 hello\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280b01009475431290e362c.png\",alt:\"image-20220515154728357\"}})]),s._v(\" \"),t(\"p\",[s._v(\"返回的1是订阅者数量\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"3、打开第一个客户端可以看到发送的消息\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280afc209475431290cf5fb.png\",alt:\"image-20220515154609823\"}})]),s._v(\" \"),t(\"p\",[s._v(\"注：发布的消息没有持久化，如果在订阅的客户端收不到hello，只能收到订阅后发布的消息\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"_6-redis新数据类型\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-redis新数据类型\"}},[s._v(\"#\")]),s._v(\" 6.Redis新数据类型\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"bitmaps\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#bitmaps\"}},[s._v(\"#\")]),s._v(\" Bitmaps\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"简介-6\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介-6\"}},[s._v(\"#\")]),s._v(\" 简介\")]),s._v(\" \"),t(\"p\",[s._v(\"现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图\"),t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280b690094754312924b5f1.png\",alt:\"image-20220515161511741\"}})]),s._v(\" \"),t(\"p\",[s._v(\"合理地使用操作位能够有效地提高内存使用率和开发效率。\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：\")]),s._v(\" \"),t(\"p\",[s._v(\"（1） Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。\")]),s._v(\" \"),t(\"p\",[s._v(\"（2） Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280b6bf094754312925523b.png\",alt:\"image-20220515161559180\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"命令\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#命令\"}},[s._v(\"#\")]),s._v(\" 命令\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"1、setbit\")])]),s._v(\" \"),t(\"p\",[s._v(\"（1）格式\")]),s._v(\" \"),t(\"p\",[s._v(\"setbit\"),t(\"key\",[t(\"offset\",[t(\"value\",[s._v(\"设置Bitmaps中某个偏移量的值（0或1）\")])],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"offset:偏移量从0开始\")]),s._v(\" \"),t(\"p\",[s._v(\"（2）实例\")]),s._v(\" \"),t(\"p\",[s._v(\"每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。\")]),s._v(\" \"),t(\"p\",[s._v(\"设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid=1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280e3e40947543129be126b.png\",alt:\"image-20220515192833321\"}})]),s._v(\" \"),t(\"p\",[s._v(\"unique:users:20201106代表2020-11-06这天的独立访问用户的Bitmaps\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280e4520947543129bf79a8.png\",alt:\"image-20220515193024078\"}})]),s._v(\" \"),t(\"p\",[s._v(\"注：\")]),s._v(\" \"),t(\"p\",[s._v(\"很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。\")]),s._v(\" \"),t(\"p\",[s._v(\"在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"2、getbit\")])]),s._v(\" \"),t(\"p\",[s._v(\"（1）格式\")]),s._v(\" \"),t(\"p\",[s._v(\"getbit\"),t(\"key\",[t(\"offset\",[s._v(\"获取Bitmaps中某个偏移量的值\")])],1)],1),s._v(\" \"),t(\"p\",[s._v(\"获取键的第offset位的值（从0开始算）\")]),s._v(\" \"),t(\"p\",[s._v(\"（2）实例\")]),s._v(\" \"),t(\"p\",[s._v(\"获取id=8的用户是否在2020-11-06这天访问过， 返回0说明没有访问过：\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280e6550947543129c627de.png\",alt:\"image-20220515193859313\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"3、bitcount\")])]),s._v(\" \"),t(\"p\",[s._v(\"统计\"),t(\"strong\",[s._v(\"字符串\")]),s._v(\"被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。\")]),s._v(\" \"),t(\"p\",[s._v(\"（1）格式\")]),s._v(\" \"),t(\"p\",[s._v(\"bitcount\"),t(\"key\",[s._v(\"[start end] 统计字符串从start字节到end字节比特值为1的数量\")])],1),s._v(\" \"),t(\"p\",[s._v(\"（2）实例\")]),s._v(\" \"),t(\"p\",[s._v(\"计算2022-11-06这天的独立访问用户数量\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280e6d50947543129c7d8f2.png\",alt:\"image-20220515194106805\"}})]),s._v(\" \"),t(\"p\",[s._v(\"start和end代表起始和结束字节数， 下面操作计算用户id在第1个字节到第3个字节之间的独立访问用户数， 对应的用户id是11， 15， 19。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280ec340947543129d99db2.png\",alt:\"image-20220515200402485\"}})]),s._v(\" \"),t(\"p\",[s._v(\"举例： K1 【01000001 01000000  00000000 00100001】，对应【0，1，2，3】\")]),s._v(\" \"),t(\"p\",[s._v(\"bitcount K1 1 2  ： 统计下标1、2字节组中bit=1的个数，即01000000  00000000\")]),s._v(\" \"),t(\"p\",[s._v(\"--》bitcount K1 1 2 　　--》1\")]),s._v(\" \"),t(\"p\",[s._v(\"bitcount K1 1 3  ： 统计下标1、2字节组中bit=1的个数，即01000000  00000000 00100001\")]),s._v(\" \"),t(\"p\",[s._v(\"--》bitcount K1 1 3　　--》3\")]),s._v(\" \"),t(\"p\",[s._v(\"bitcount K1 0 -2  ： 统计下标0到下标倒数第2，字节组中bit=1的个数，即01000001  01000000  00000000\")]),s._v(\" \"),t(\"p\",[s._v(\"--》bitcount K1 0 -2　　--》3\")]),s._v(\" \"),t(\"p\",[s._v(\"注意：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"4、bitop\")])]),s._v(\" \"),t(\"p\",[s._v(\"(1)格式\")]),s._v(\" \"),t(\"p\",[s._v(\"bitop and(or/not/xor) \"),t(\"destkey\",[s._v(\" [key…]\")])],1),s._v(\" \"),t(\"p\",[s._v(\"bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。\")]),s._v(\" \"),t(\"p\",[s._v(\"(2)实例\")]),s._v(\" \"),t(\"p\",[s._v(\"2020-11-04 日访问网站的userid=1,2,5,9。\")]),s._v(\" \"),t(\"p\",[s._v(\"setbit unique:users:20201104 1 1\")]),s._v(\" \"),t(\"p\",[s._v(\"setbit unique:users:20201104 2 1\")]),s._v(\" \"),t(\"p\",[s._v(\"setbit unique:users:20201104 5 1\")]),s._v(\" \"),t(\"p\",[s._v(\"setbit unique:users:20201104 9 1\")]),s._v(\" \"),t(\"hr\"),s._v(\" \"),t(\"p\",[s._v(\"2020-11-03 日访问网站的userid=0,1,4,9。\")]),s._v(\" \"),t(\"p\",[s._v(\"setbit unique:users:20201103 0 1\")]),s._v(\" \"),t(\"p\",[s._v(\"setbit unique:users:20201103 1 1\")]),s._v(\" \"),t(\"p\",[s._v(\"setbit unique:users:20201103 4 1\")]),s._v(\" \"),t(\"p\",[s._v(\"setbit unique:users:20201103 9 1\")]),s._v(\" \"),t(\"hr\"),s._v(\" \"),t(\"p\",[s._v(\"计算出两天都访问过网站的用户数量\")]),s._v(\" \"),t(\"p\",[s._v(\"bitop and unique:users:and:20201104_03 unique:users:20201103 unique:users:20201104\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280ede70947543129df2d62.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280ede70947543129df2df7.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"计算出任意一天都访问过网站的用户数量（例如月活跃就是类似这种） ， 可以使用or求并集\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280ede70947543129df2d67.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Bitmaps与set对比\")])]),s._v(\" \"),t(\"p\",[s._v(\"假设网站有1亿用户， 每天独立访问的用户有5千万， 如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表\")]),s._v(\" \"),t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[s._v(\"set和Bitmaps存储一天活跃用户对比\")]),s._v(\" \"),t(\"th\"),s._v(\" \"),t(\"th\"),s._v(\" \"),t(\"th\")])]),s._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[s._v(\"数据类型\")]),s._v(\" \"),t(\"td\",[s._v(\"每个用户id占用空间\")]),s._v(\" \"),t(\"td\",[s._v(\"需要存储的用户量\")]),s._v(\" \"),t(\"td\",[s._v(\"全部内存量\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"集合类型\")]),s._v(\" \"),t(\"td\",[s._v(\"64位\")]),s._v(\" \"),t(\"td\",[s._v(\"50000000\")]),s._v(\" \"),t(\"td\",[s._v(\"64位*50000000 = 400MB\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"Bitmaps\")]),s._v(\" \"),t(\"td\",[s._v(\"1位\")]),s._v(\" \"),t(\"td\",[s._v(\"100000000\")]),s._v(\" \"),t(\"td\",[s._v(\"1位*100000000 = 12.5MB\")])])])]),s._v(\" \"),t(\"p\",[s._v(\"很明显， 这种情况下使用Bitmaps能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的\")]),s._v(\" \"),t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[s._v(\"set和Bitmaps存储独立用户空间对比\")]),s._v(\" \"),t(\"th\"),s._v(\" \"),t(\"th\"),s._v(\" \"),t(\"th\")])]),s._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[s._v(\"数据类型\")]),s._v(\" \"),t(\"td\",[s._v(\"一天\")]),s._v(\" \"),t(\"td\",[s._v(\"一个月\")]),s._v(\" \"),t(\"td\",[s._v(\"一年\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"集合类型\")]),s._v(\" \"),t(\"td\",[s._v(\"400MB\")]),s._v(\" \"),t(\"td\",[s._v(\"12GB\")]),s._v(\" \"),t(\"td\",[s._v(\"144GB\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"Bitmaps\")]),s._v(\" \"),t(\"td\",[s._v(\"12.5MB\")]),s._v(\" \"),t(\"td\",[s._v(\"375MB\")]),s._v(\" \"),t(\"td\",[s._v(\"4.5GB\")])])])]),s._v(\" \"),t(\"table\",[t(\"thead\",[t(\"tr\",[t(\"th\",[s._v(\"set和Bitmaps存储一天活跃用户对比（独立用户比较少）\")]),s._v(\" \"),t(\"th\"),s._v(\" \"),t(\"th\"),s._v(\" \"),t(\"th\")])]),s._v(\" \"),t(\"tbody\",[t(\"tr\",[t(\"td\",[s._v(\"数据类型\")]),s._v(\" \"),t(\"td\",[s._v(\"每个userid占用空间\")]),s._v(\" \"),t(\"td\",[s._v(\"需要存储的用户量\")]),s._v(\" \"),t(\"td\",[s._v(\"全部内存量\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"集合类型\")]),s._v(\" \"),t(\"td\",[s._v(\"64位\")]),s._v(\" \"),t(\"td\",[s._v(\"100000\")]),s._v(\" \"),t(\"td\",[s._v(\"64位*100000 = 800KB\")])]),s._v(\" \"),t(\"tr\",[t(\"td\",[s._v(\"Bitmaps\")]),s._v(\" \"),t(\"td\",[s._v(\"1位\")]),s._v(\" \"),t(\"td\",[s._v(\"100000000\")]),s._v(\" \"),t(\"td\",[s._v(\"1位*100000000 = 12.5MB\")])])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"hyperloglog\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hyperloglog\"}},[s._v(\"#\")]),s._v(\" HyperLogLog\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"简介-7\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介-7\"}},[s._v(\"#\")]),s._v(\" 简介\")]),s._v(\" \"),t(\"p\",[s._v(\"在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。\")]),s._v(\" \"),t(\"p\",[s._v(\"但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。\")]),s._v(\" \"),t(\"p\",[s._v(\"解决基数问题有很多种方案：\")]),s._v(\" \"),t(\"p\",[s._v(\"（1）数据存储在MySQL表中，使用distinct count计算不重复个数\")]),s._v(\" \"),t(\"p\",[s._v(\"（2）使用Redis提供的hash、set、bitmaps等数据结构来处理\")]),s._v(\" \"),t(\"p\",[s._v(\"以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。\")]),s._v(\" \"),t(\"p\",[s._v(\"能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。\")]),s._v(\" \"),t(\"p\",[s._v(\"在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。\")]),s._v(\" \"),t(\"p\",[s._v(\"但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"什么是基数?\")])]),s._v(\" \"),t(\"p\",[s._v(\"比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"命令-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#命令-2\"}},[s._v(\"#\")]),s._v(\" 命令\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"1、pfadd\")])]),s._v(\" \"),t(\"p\",[s._v(\"（1）格式\")]),s._v(\" \"),t(\"p\",[s._v(\"pfadd \"),t(\"key\",[s._v(\"< element> [element ...]  添加指定元素到 HyperLogLog 中\")])],1),s._v(\" \"),t(\"p\",[s._v(\"（2）实例\")]),s._v(\" \"),t(\"p\",[s._v(\"将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280f8be094754312904e01f.png\",alt:\"image-20220515205731481\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"2、pfcount\")])]),s._v(\" \"),t(\"p\",[s._v(\"（1）格式\")]),s._v(\" \"),t(\"p\",[s._v(\"pfcount\"),t(\"key\",[s._v(\" [key ...] 计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可\")])],1),s._v(\" \"),t(\"p\",[s._v(\"(2) 实例\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280f9e0094754312908b0df.png\",alt:\"image-20220515210221615\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"3、pfmerge\")])]),s._v(\" \"),t(\"p\",[s._v(\"（1）格式\")]),s._v(\" \"),t(\"p\",[s._v(\"pfmerge\"),t(\"destkey\",[t(\"sourcekey\",[s._v(\" [sourcekey ...]  将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得\")])],1)],1),s._v(\" \"),t(\"p\",[s._v(\"（2）实例\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280fa2a094754312909b069.png\",alt:\"image-20220515210335844\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"geospatial\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#geospatial\"}},[s._v(\"#\")]),s._v(\" Geospatial\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"简介-8\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介-8\"}},[s._v(\"#\")]),s._v(\" 简介\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"命令-3\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#命令-3\"}},[s._v(\"#\")]),s._v(\" 命令\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"1、geoadd\")])]),s._v(\" \"),t(\"p\",[s._v(\"（1）格式\")]),s._v(\" \"),t(\"p\",[s._v(\"geoadd\"),t(\"key\",[s._v(\"< longitude>\"),t(\"latitude\",[t(\"member\",[s._v(\" [longitude latitude member...]  添加地理位置（经度，纬度，名称）\")])],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"（2）实例\")]),s._v(\" \"),t(\"p\",[s._v(\"geoadd china:city 121.47 31.23 shanghai\")]),s._v(\" \"),t(\"p\",[s._v(\"geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280fba909475431290efd5e.png\",alt:\"image-20220515210959026\"}})]),s._v(\" \"),t(\"p\",[s._v(\"两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。\")]),s._v(\" \"),t(\"p\",[s._v(\"有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。\")]),s._v(\" \"),t(\"p\",[s._v(\"当坐标位置超出指定范围时，该命令将会返回一个错误。\")]),s._v(\" \"),t(\"p\",[s._v(\"已经添加的数据，是无法再次往里面添加的。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"2、geopos\")])]),s._v(\" \"),t(\"p\",[s._v(\"（1）格式\")]),s._v(\" \"),t(\"p\",[s._v(\"geopos  \"),t(\"key\",[t(\"member\",[s._v(\" [member...]  获得指定地区的坐标值\")])],1)],1),s._v(\" \"),t(\"p\",[s._v(\"（2）实例\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280fde2094754312916ca36.png\",alt:\"image-20220515211929549\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"3、geodist\")])]),s._v(\" \"),t(\"p\",[s._v(\"（1）格式\")]),s._v(\" \"),t(\"p\",[s._v(\"geodist\"),t(\"key\",[t(\"member1\",[t(\"member2\",[s._v(\"  [m|km|ft|mi ]  获取两个位置之间的直线距离\")])],1)],1)],1),s._v(\" \"),t(\"p\",[s._v(\"（2）实例\")]),s._v(\" \"),t(\"p\",[s._v(\"获取两个位置之间的直线距离\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280fe410947543129182afb.png\",alt:\"image-20220515212104617\"}})]),s._v(\" \"),t(\"p\",[s._v(\"单位：\")]),s._v(\" \"),t(\"p\",[s._v(\"m 表示单位为米[默认值]。\")]),s._v(\" \"),t(\"p\",[s._v(\"km 表示单位为千米。\")]),s._v(\" \"),t(\"p\",[s._v(\"mi 表示单位为英里。\")]),s._v(\" \"),t(\"p\",[s._v(\"ft 表示单位为英尺。\")]),s._v(\" \"),t(\"p\",[s._v(\"如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"4、georadius\")])]),s._v(\" \"),t(\"p\",[s._v(\"（1）格式\")]),s._v(\" \"),t(\"p\",[s._v(\"georadius\"),t(\"key\",[s._v(\"< longitude>\"),t(\"latitude\",[s._v(\"radius m|km|ft|mi  以给定的经纬度为中心，找出某一半径内的元素\")])],1)],1),s._v(\" \"),t(\"p\",[s._v(\"经度 纬度 距离 单位\")]),s._v(\" \"),t(\"p\",[s._v(\"（2）实例\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6280fec709475431291a136b.png\",alt:\"image-20220515212318528\"}})]),s._v(\" \"),t(\"h2\",{attrs:{id:\"_7-redis整合springboot\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-redis整合springboot\"}},[s._v(\"#\")]),s._v(\" 7.Redis整合Springboot\")]),s._v(\" \"),t(\"p\",[s._v(\"1、 在pom.xml文件中引入redis相关依赖\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-xml line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"\\x3c!-- redis --\\x3e\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),s._v(\"dependency\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),s._v(\"groupId\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"org.springframework.boot\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"</\")]),s._v(\"groupId\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),s._v(\"artifactId\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"spring-boot-starter-data-redis\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"</\")]),s._v(\"artifactId\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"</\")]),s._v(\"dependency\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"\\n\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"\\x3c!-- spring2.X集成redis所需common-pool2--\\x3e\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),s._v(\"dependency\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),s._v(\"groupId\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"org.apache.commons\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"</\")]),s._v(\"groupId\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),s._v(\"artifactId\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"commons-pool2\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"</\")]),s._v(\"artifactId\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),s._v(\"version\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"2.6.0\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"</\")]),s._v(\"version\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"</\")]),s._v(\"dependency\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\")])]),t(\"p\",[s._v(\"2、 application.properties配置redis配置\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-yaml line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-yaml\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"#Redis服务器地址\")]),s._v(\"\\nspring.redis.host=192.168.140.136\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"#Redis服务器连接端口\")]),s._v(\"\\nspring.redis.port=6379\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"#Redis数据库索引（默认为0）\")]),s._v(\"\\nspring.redis.database= 0\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"#连接超时时间（毫秒）\")]),s._v(\"\\nspring.redis.timeout=1800000\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"#连接池最大连接数（使用负值表示没有限制）\")]),s._v(\"\\nspring.redis.lettuce.pool.max\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"-\")]),s._v(\"active=20\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"#最大阻塞等待时间(负数表示没限制)\")]),s._v(\"\\nspring.redis.lettuce.pool.max\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"-\")]),s._v(\"wait=\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"-\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"#连接池中的最大空闲连接\")]),s._v(\"\\nspring.redis.lettuce.pool.max\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"-\")]),s._v(\"idle=5\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"#连接池中的最小空闲连接\")]),s._v(\"\\nspring.redis.lettuce.pool.min\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"-\")]),s._v(\"idle=0\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),t(\"br\")])]),t(\"p\",[s._v(\"3、 添加redis配置类\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@EnableCaching\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Configuration\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisConfig\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"extends\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"CachingConfigurerSupport\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Bean\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisTemplate\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"redisTemplate\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisConnectionFactory\")]),s._v(\" factory\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisTemplate\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" template \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisTemplate\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisSerializer\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" redisSerializer \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"StringRedisSerializer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Jackson2JsonRedisSerializer\")]),s._v(\" jackson2JsonRedisSerializer \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Jackson2JsonRedisSerializer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ObjectMapper\")]),s._v(\" om \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ObjectMapper\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    om\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"setVisibility\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"PropertyAccessor\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"ALL\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"JsonAutoDetect\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"Visibility\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"ANY\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    om\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"enableDefaultTyping\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ObjectMapper\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"DefaultTyping\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"NON_FINAL\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    jackson2JsonRedisSerializer\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"setObjectMapper\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"om\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    template\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"setConnectionFactory\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"factory\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//key序列化方式\")]),s._v(\"\\n    template\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"setKeySerializer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"redisSerializer\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//value序列化\")]),s._v(\"\\n    template\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"setValueSerializer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"jackson2JsonRedisSerializer\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//value hashmap序列化\")]),s._v(\"\\n    template\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"setHashValueSerializer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"jackson2JsonRedisSerializer\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" template\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Bean\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"CacheManager\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"cacheManager\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisConnectionFactory\")]),s._v(\" factory\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisSerializer\")]),t(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"<\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\">\")])]),s._v(\" redisSerializer \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"StringRedisSerializer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Jackson2JsonRedisSerializer\")]),s._v(\" jackson2JsonRedisSerializer \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Jackson2JsonRedisSerializer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Object\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//解决查询缓存转换异常的问题\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ObjectMapper\")]),s._v(\" om \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ObjectMapper\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    om\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"setVisibility\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"PropertyAccessor\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"ALL\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"JsonAutoDetect\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"Visibility\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"ANY\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    om\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"enableDefaultTyping\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"ObjectMapper\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"DefaultTyping\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"NON_FINAL\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    jackson2JsonRedisSerializer\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"setObjectMapper\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"om\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 配置序列化（解决乱码的问题）,过期时间600秒\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisCacheConfiguration\")]),s._v(\" config \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisCacheConfiguration\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"defaultCacheConfig\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n      \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"entryTtl\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Duration\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"ofSeconds\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"600\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n      \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"serializeKeysWith\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisSerializationContext\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"SerializationPair\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"fromSerializer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"redisSerializer\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n      \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"serializeValuesWith\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisSerializationContext\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"SerializationPair\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"fromSerializer\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"jackson2JsonRedisSerializer\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n      \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"disableCachingNullValues\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisCacheManager\")]),s._v(\" cacheManager \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisCacheManager\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"builder\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"factory\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n      \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"cacheDefaults\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"config\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n      \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"build\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" cacheManager\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n  \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"32\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"33\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"34\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"35\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"36\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"37\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"38\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"39\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"40\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"41\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"42\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"43\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"44\")]),t(\"br\")])]),t(\"p\",[s._v(\"4、测试\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-java line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@RestController\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@RequestMapping\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"/redisTest\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisTestController\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@Autowired\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"RedisTemplate\")]),s._v(\" redisTemplate\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[s._v(\"@GetMapping\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"testRedis\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//设置值到redis\")]),s._v(\"\\n        redisTemplate\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"opsForValue\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"set\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"name\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"lucy\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//从redis获取值\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),s._v(\" name \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"redisTemplate\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"opsForValue\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"get\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"name\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" name\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\")])]),t(\"h2\",{attrs:{id:\"_8-redis事务-锁机制\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-redis事务-锁机制\"}},[s._v(\"#\")]),s._v(\" 8.Redis事务（锁机制）\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"redis的事务定义\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis的事务定义\"}},[s._v(\"#\")]),s._v(\" Redis的事务定义\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis事务的主要作用就是\"),t(\"strong\",[s._v(\"串联多个命令\")]),s._v(\"防止别的命令插队。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"multi、exec、discard\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#multi、exec、discard\"}},[s._v(\"#\")]),s._v(\" Multi、Exec、discard\")]),s._v(\" \"),t(\"p\",[s._v(\"从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。\")]),s._v(\" \"),t(\"p\",[s._v(\"组队的过程中可以通过discard(类似mysql中的回滚事务)来放弃组队。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6282486a0947543129511649.png\",alt:\"image-20220516204945204\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"案列\")])]),s._v(\" \"),t(\"p\",[s._v(\"组队成功\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62824b1f094754312959d9f2.png\",alt:\"image-20220516210118975\"}})]),s._v(\" \"),t(\"hr\"),s._v(\" \"),t(\"p\",[s._v(\"组队阶段报错，提交失败\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62824b7909475431295ae29f.png\",alt:\"image-20220516210248859\"}})]),s._v(\" \"),t(\"hr\"),s._v(\" \"),t(\"p\",[s._v(\"组队成功，提交有成功有失败情况\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62824ba009475431295b5d18.png\",alt:\"image-20220516210328081\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"事务的错误处理\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务的错误处理\"}},[s._v(\"#\")]),s._v(\" 事务的错误处理\")]),s._v(\" \"),t(\"p\",[s._v(\"组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62824c8009475431295e7b37.png\",alt:\"image-20220516210710868\"}})]),s._v(\" \"),t(\"p\",[s._v(\"如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62824c9209475431295ebf25.png\",alt:\"image-20220516210728977\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"事务冲突的问题\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务冲突的问题\"}},[s._v(\"#\")]),s._v(\" 事务冲突的问题\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"例子\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#例子\"}},[s._v(\"#\")]),s._v(\" 例子\")]),s._v(\" \"),t(\"p\",[s._v(\"一个请求想给金额减8000\")]),s._v(\" \"),t(\"p\",[s._v(\"一个请求想给金额减5000\")]),s._v(\" \"),t(\"p\",[s._v(\"一个请求想给金额减1000\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62824d570947543129617a7e.png\",alt:\"image-20220516211045567\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"悲观锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#悲观锁\"}},[s._v(\"#\")]),s._v(\" 悲观锁\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62824e5b0947543129650ed8.png\",alt:\"image-20220516211506625\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"悲观锁(Pessimistic Lock)\")]),s._v(\", 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。\"),t(\"strong\",[s._v(\"传统的关系型数据库里边就用到了很多这种锁机制\")]),s._v(\"，比如\"),t(\"strong\",[s._v(\"行锁\")]),s._v(\"，\"),t(\"strong\",[s._v(\"表锁\")]),s._v(\"等，\"),t(\"strong\",[s._v(\"读锁\")]),s._v(\"，\"),t(\"strong\",[s._v(\"写锁\")]),s._v(\"等，都是在做操作之前先上锁。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"乐观锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#乐观锁\"}},[s._v(\"#\")]),s._v(\" 乐观锁\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62824fc709475431296a0835.png\",alt:\"image-20220516212109120\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"乐观锁(Optimistic Lock)\")]),s._v(\" 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。\"),t(\"strong\",[s._v(\"乐观锁适用于多读的应用类型，这样可以提高吞吐量\")]),s._v(\"。Redis就是利用这种check-and-set机制实现事务的。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"WATCH key [key ...]\")])]),s._v(\" \"),t(\"p\",[s._v(\"在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"unwatch\")])]),s._v(\" \"),t(\"p\",[s._v(\"取消 WATCH 命令对所有 key 的监视。\")]),s._v(\" \"),t(\"p\",[s._v(\"如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。\")]),s._v(\" \"),t(\"p\",[s._v(\"http://doc.redisfans.com/transaction/exec.html\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"redis事务三特性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis事务三特性\"}},[s._v(\"#\")]),s._v(\" Redis事务三特性\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Ø 单独的隔离操作\")])]),s._v(\" \"),t(\"p\",[s._v(\"n 事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Ø 没有隔离级别的概念\")])]),s._v(\" \"),t(\"p\",[s._v(\"n 队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"Ø 不保证原子性\")])]),s._v(\" \"),t(\"p\",[s._v(\"n 事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"_9-redis持久化之rdb-redis-database\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-redis持久化之rdb-redis-database\"}},[s._v(\"#\")]),s._v(\" 9.Redis持久化之RDB(Redis DataBase)\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"简介-9\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介-9\"}},[s._v(\"#\")]),s._v(\" 简介\")]),s._v(\" \"),t(\"p\",[s._v(\"在指定的时间间隔内将内存中的数据集快照写入磁盘， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"fork\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fork\"}},[s._v(\"#\")]),s._v(\" Fork\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“写时复制技术”\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"一般情况父进程和子进程会共用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。\")])])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"RDB持久化的进程\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628338ca09475431294bd1ec.png\",alt:\"image-20220517135521384\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"dump.rdb文件\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62834ebe09475431299204bb.png\",alt:\"image-20220517152901755\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"如何触发rdb快照-保持策略\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何触发rdb快照-保持策略\"}},[s._v(\"#\")]),s._v(\" \"),t(\"strong\",[s._v(\"如何触发RDB快照，保持策略\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"配置文件中默认的快照配置\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配置文件中默认的快照配置\"}},[s._v(\"#\")]),s._v(\" 配置文件中默认的快照配置\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6283531e0947543129a0318b.png\",alt:\"image-20220517154741633\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"save\")]),s._v(\"VS\"),t(\"strong\",[s._v(\"bgsave\")])]),s._v(\" \"),t(\"p\",[s._v(\"save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。\")]),s._v(\" \"),t(\"p\",[s._v(\"bgsave：Redis会在后台异步进行快照操作， 快照同时还可以响应客户端请求。\")]),s._v(\" \"),t(\"p\",[s._v(\"可以通过lastsave 命令获取最后一次成功执行快照的时间\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"snapshotting快照\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#snapshotting快照\"}},[s._v(\"#\")]),s._v(\" SNAPSHOTTING快照\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"save\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#save\"}},[s._v(\"#\")]),s._v(\" Save\")]),s._v(\" \"),t(\"p\",[s._v(\"格式：save 秒钟 写操作次数\\nRDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，\\n默认是1分钟内改了1万次，或5分钟内改了10次，或15分钟内改了1次。\\n禁用\\n不设置save指令，或者给save传入空字符串\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"stop-writes-on-bgsave-error\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stop-writes-on-bgsave-error\"}},[s._v(\"#\")]),s._v(\" stop-writes-on-bgsave-error\")]),s._v(\" \"),t(\"p\",[s._v(\"当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes.\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62836d8f0947543129eea413.png\",alt:\"image-20220517174030251\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"rdbcompression-压缩文件\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rdbcompression-压缩文件\"}},[s._v(\"#\")]),s._v(\" rdbcompression 压缩文件\")]),s._v(\" \"),t(\"p\",[s._v(\"对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。\\n如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62836d950947543129eeb94c.png\",alt:\"image-20220517174035768\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"rdbchecksum-检查完整性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rdbchecksum-检查完整性\"}},[s._v(\"#\")]),s._v(\" rdbchecksum 检查完整性\")]),s._v(\" \"),t(\"p\",[s._v(\"在存储快照后，还可以让redis使用CRC64算法来进行数据校验，\\n但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能\\n推荐yes.\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62836d9b0947543129eed167.png\",alt:\"image-20220517174041508\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"rdb的备份\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rdb的备份\"}},[s._v(\"#\")]),s._v(\" rdb的备份\")]),s._v(\" \"),t(\"p\",[s._v(\"先通过config get dir  查询rdb文件的目录\\n将*.rdb的文件拷贝到别的地方\\n\"),t(\"strong\",[s._v(\"rdb的恢复\")])]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"关闭Redis\")]),s._v(\" \"),t(\"li\",[s._v(\"先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb\")]),s._v(\" \"),t(\"li\",[s._v(\"启动Redis, 备份数据会直接加载\")])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"优势\")])]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"适合大规模的数据恢复\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"对数据完整性和一致性要求不高更适合使用\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"节省磁盘空间\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"恢复速度快\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62836e010947543129f0148b.png\",alt:\"image-20220517174224621\"}})])])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"劣势\")])]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑\")]),s._v(\" \"),t(\"li\",[s._v(\"虽然Redis在fork时使用了写时拷贝技术,但是如果数据庞大时还是比较消耗性能。\")]),s._v(\" \"),t(\"li\",[s._v(\"在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。\")])]),s._v(\" \"),t(\"h4\",{attrs:{id:\"如何停止\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何停止\"}},[s._v(\"#\")]),s._v(\" \"),t(\"strong\",[s._v(\"如何停止\")])]),s._v(\" \"),t(\"p\",[s._v('动态停止RDB：redis-cli config set save \"\"#save后给空值，表示禁用保存策略')]),s._v(\" \"),t(\"h3\",{attrs:{id:\"总结\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[s._v(\"#\")]),s._v(\" 总结\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62836e0f0947543129f03954.png\",alt:\"image-20220517174237266\"}})]),s._v(\" \"),t(\"h2\",{attrs:{id:\"_10-redis持久化之aof-append-only-file\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-redis持久化之aof-append-only-file\"}},[s._v(\"#\")]),s._v(\" 10.Redis持久化之AOF（Append Only File）\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"简介-10\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介-10\"}},[s._v(\"#\")]),s._v(\" 简介\")]),s._v(\" \"),t(\"p\",[s._v(\"以日志的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(读操作不记录)， 只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"aof持久化流程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#aof持久化流程\"}},[s._v(\"#\")]),s._v(\" AOF持久化流程\")]),s._v(\" \"),t(\"p\",[s._v(\"（1）客户端的请求写命令会被append追加到AOF缓冲区内；\")]),s._v(\" \"),t(\"p\",[s._v(\"（2）AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；\")]),s._v(\" \"),t(\"p\",[s._v(\"（3）AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；\")]),s._v(\" \"),t(\"p\",[s._v(\"（4）Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6283746d0947543129068997.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"AOF默认不开启\")]),s._v(\"\\n可以在redis.conf中配置文件名称，默认为 appendonly.aof\\nAOF文件的保存路径，同RDB的路径一致。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"AOF和RDB同时开启，redis听谁的？\")])]),s._v(\" \"),t(\"p\",[s._v(\"AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"AOF启动/修复/恢复\")])]),s._v(\" \"),t(\"p\",[s._v(\"AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"正常恢复\")])]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"修改默认的appendonly no，改为yes\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"恢复：重启redis然后重新加载\")])])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"异常恢复\")])]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"修改默认的appendonly no，改为yes\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"如遇到\"),t(\"strong\",[s._v(\"AOF文件损坏\")]),s._v(\"，通过/usr/local/bin/\"),t(\"strong\",[s._v(\"redis-check-aof--fix appendonly.aof\")]),s._v(\"进行恢复\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"备份被写坏的AOF文件\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"恢复：重启redis，然后重新加载\")])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"aof同步频率设置\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#aof同步频率设置\"}},[s._v(\"#\")]),s._v(\" \"),t(\"strong\",[s._v(\"AOF同步频率设置\")])]),s._v(\" \"),t(\"p\",[s._v(\"appendfsync always\")]),s._v(\" \"),t(\"p\",[s._v(\"始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好\")]),s._v(\" \"),t(\"p\",[s._v(\"appendfsync everysec\")]),s._v(\" \"),t(\"p\",[s._v(\"每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。\")]),s._v(\" \"),t(\"p\",[s._v(\"appendfsync no\")]),s._v(\" \"),t(\"p\",[s._v(\"redis不主动进行同步，把同步时机交给操作系统。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"rewrite压缩\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rewrite压缩\"}},[s._v(\"#\")]),s._v(\" \"),t(\"strong\",[s._v(\"Rewrite压缩\")])]),s._v(\" \"),t(\"p\",[s._v(\"1是什么：\")]),s._v(\" \"),t(\"p\",[s._v(\"AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof\")]),s._v(\" \"),t(\"p\",[s._v(\"2重写原理，如何实现重写\")]),s._v(\" \"),t(\"p\",[s._v(\"AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。\")]),s._v(\" \"),t(\"p\",[s._v(\"no-appendfsync-on-rewrite：\")]),s._v(\" \"),t(\"p\",[s._v(\"如果 no-appendfsync-on-rewrite=yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）\")]),s._v(\" \"),t(\"p\",[s._v(\"如果 no-appendfsync-on-rewrite=no,  还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）\")]),s._v(\" \"),t(\"p\",[s._v(\"触发机制，何时重写\")]),s._v(\" \"),t(\"p\",[s._v(\"Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发\")]),s._v(\" \"),t(\"p\",[s._v(\"重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。\")]),s._v(\" \"),t(\"p\",[s._v(\"auto-aof-rewrite-percentage：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）\")]),s._v(\" \"),t(\"p\",[s._v(\"auto-aof-rewrite-min-size：设置重写的基准值，最小文件64MB。达到这个值开始重写。\")]),s._v(\" \"),t(\"p\",[s._v(\"例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB\")]),s._v(\" \"),t(\"p\",[s._v(\"系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,\")]),s._v(\" \"),t(\"p\",[s._v(\"如果Redis的AOF当前大小>= base_size +base_size*100% (默认)且当前大小>=64mb(默认)的情况下，Redis会对AOF进行重写。\")]),s._v(\" \"),t(\"p\",[s._v(\"3、重写流程\")]),s._v(\" \"),t(\"p\",[s._v(\"（1）bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。\")]),s._v(\" \"),t(\"p\",[s._v(\"（2）主进程fork出子进程执行重写操作，保证主进程不会阻塞。\")]),s._v(\" \"),t(\"p\",[s._v(\"（3）子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。\")]),s._v(\" \"),t(\"p\",[s._v(\"（4）1).子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。2).主进程把aof_rewrite_buf中的数据写入到新的AOF文件。\")]),s._v(\" \"),t(\"p\",[s._v(\"（5）使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"优势\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6283a09c0947543129b9be35.png\",alt:\"image-20220517211818782\"}})]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"备份机制更稳健，丢失数据概率更低。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"可读的日志文本，通过操作AOF稳健，可以处理误操作。\")])])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"劣势\")])]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"比起RDB占用更多的磁盘空间。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"恢复备份速度要慢。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"每次读写都同步的话，有一定的性能压力。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"存在个别Bug，造成恢复不能。\")])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"总结-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结-2\"}},[s._v(\"#\")]),s._v(\" 总结\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6283a1040947543129bbab42.png\",alt:\"image-20220517212001045\"}})]),s._v(\" \"),t(\"p\",[s._v(\"官方推荐两个都启用。\")]),s._v(\" \"),t(\"p\",[s._v(\"如果对数据不敏感，可以选单独用RDB。\")]),s._v(\" \"),t(\"p\",[s._v(\"不建议单独用 AOF，因为可能会出现Bug。\")]),s._v(\" \"),t(\"p\",[s._v(\"如果只是做纯内存缓存，可以都不用。\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"同时开启两种持久化方式\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据, 因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"性能建议\")]),s._v(\" \"),t(\"p\",[s._v(\"因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。\")]),s._v(\" \"),t(\"p\",[s._v(\"如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。\")])])]),s._v(\" \"),t(\"p\",[s._v(\"​\\t\\t代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。\")]),s._v(\" \"),t(\"p\",[s._v(\"​\\t\\t只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。\")]),s._v(\" \"),t(\"p\",[s._v(\"​\\t\\t默认超过原大小100%大小时重写可以改到适当的数值。\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"_11-redis主从复制\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_11-redis主从复制\"}},[s._v(\"#\")]),s._v(\" 11.Redis主从复制\")]),s._v(\" \"),t(\"p\",[s._v(\"主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。\")]),s._v(\" \"),t(\"p\",[s._v(\"作用：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"读写分离，性能拓展\")]),s._v(\" \"),t(\"li\",[s._v(\"容灾快速恢复\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6283a5d70947543129d88fe0.png\",alt:\"image-20220517214037844\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"配置\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配置\"}},[s._v(\"#\")]),s._v(\" 配置\")]),s._v(\" \"),t(\"p\",[s._v(\"拷贝多个redis.conf文件include(写绝对路径)\")]),s._v(\" \"),t(\"p\",[s._v(\"开启daemonize yes\")]),s._v(\" \"),t(\"p\",[s._v(\"Pid文件名字pidfile\")]),s._v(\" \"),t(\"p\",[s._v(\"指定端口port\")]),s._v(\" \"),t(\"p\",[s._v(\"Log文件名字\")]),s._v(\" \"),t(\"p\",[s._v(\"dump.rdb名字dbfilename\")]),s._v(\" \"),t(\"p\",[s._v(\"Appendonly 关掉或者换名字\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"新建redis6379（6380，6381）.conf，填写以下内容\")])]),s._v(\" \"),t(\"p\",[s._v(\"include /myredis/redis.conf\")]),s._v(\" \"),t(\"p\",[s._v(\"pidfile /var/run/redis_6379（6380，6381）.pid\")]),s._v(\" \"),t(\"p\",[s._v(\"port 6379（6380，6381）\")]),s._v(\" \"),t(\"p\",[s._v(\"dbfilename dump6379.rdb\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"slave-priority 10。\")]),s._v(\" \"),t(\"li\",[s._v(\"设置从机的优先级，值越小，优先级越高，用于选举主机时使用。默认100\")])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"启动三台redis服务器\")])]),s._v(\" \"),t(\"p\",[s._v(\"redis-server redis_6379(6380，6381).conf\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"查看系统进程查看三台服务器是否启动\")])]),s._v(\" \"),t(\"p\",[t(\"code\",[s._v(\"ps -ef | grep redis\")])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"查看三台主机的运行情况\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6288562b0947543129d8158e.png\",alt:\"image-20220521110203085\"}})]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628856680947543129d83382.png\",alt:\"image-20220521110303991\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"配从-库-不配主-库\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配从-库-不配主-库\"}},[s._v(\"#\")]),s._v(\" 配从(库)不配主(库)\")]),s._v(\" \"),t(\"p\",[s._v(\"slaveof  \"),t(\"ip\",[t(\"port\")],1)],1),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"在主机上写，在从机上可以读取数据\\n在从机上写数据报错\")]),s._v(\" \"),t(\"li\",[s._v(\"主机挂掉，重启就行，一切如初\")]),s._v(\" \"),t(\"li\",[s._v(\"从机重启需重设：slaveof 127.0.0.1 6379\")])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"一主二仆\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一主二仆\"}},[s._v(\"#\")]),s._v(\" 一主二仆\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"如果主机断开了，从机依然链接到主机，可以进行读操作，但是还是没有写操作。（因为主从模式还没有故障转移能力）这个时候，主机如果恢复了，从机依然可以直接从主机同步信息\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"使用命令行配置的主从机，如果从机重启了，就会变回主机。如果再通过命令变回从机的话，立马就可以从主机中获取值。这是复制原理决定的.\")])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"薪火相传\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#薪火相传\"}},[s._v(\"#\")]),s._v(\" 薪火相传\")]),s._v(\" \"),t(\"p\",[s._v(\"上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。\")]),s._v(\" \"),t(\"p\",[s._v(\"用 slaveof  \"),t(\"ip\",[t(\"port\")],1)],1),s._v(\" \"),t(\"p\",[s._v(\"中途变更转向:会清除之前的数据，重新建立拷贝最新的\")]),s._v(\" \"),t(\"p\",[s._v(\"风险是一旦某个slave宕机，后面的slave都没法备份\")]),s._v(\" \"),t(\"p\",[s._v(\"主机挂了，从机还是从机，无法写数据了\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"反客为主\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反客为主\"}},[s._v(\"#\")]),s._v(\" 反客为主\")]),s._v(\" \"),t(\"p\",[s._v(\"当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。\")]),s._v(\" \"),t(\"p\",[s._v(\"用 slaveof  no one  将从机变为主机。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"复制原理\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#复制原理\"}},[s._v(\"#\")]),s._v(\" 复制原理\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[s._v(\"Slave启动成功连接到master后会发送一个sync命令\")]),s._v(\" \"),t(\"li\",[s._v(\"Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步\")]),s._v(\" \"),t(\"li\",[s._v(\"全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。\")]),s._v(\" \"),t(\"li\",[s._v(\"增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步\")]),s._v(\" \"),t(\"li\",[s._v(\"但是只要是重新连接master,一次完全同步（全量复制)将被自动执行\")])]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/62887cad0947543129facba2.png\",alt:\"image-20220521134620893\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"哨兵模式\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#哨兵模式\"}},[s._v(\"#\")]),s._v(\" 哨兵模式\")]),s._v(\" \"),t(\"p\",[s._v(\"反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6288aedd094754312920d1bf.png\",alt:\"image-20220521172028039\"}})]),s._v(\" \"),t(\"h4\",{attrs:{id:\"操作介绍\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#操作介绍\"}},[s._v(\"#\")]),s._v(\" 操作介绍\")]),s._v(\" \"),t(\"p\",[s._v(\"1、调整为一主二仆模式，6379带着6380和6381，并且在配置目录下新建sentinel.conf文件。\")]),s._v(\" \"),t(\"p\",[s._v(\"2、配置哨兵，填写配置\"),t(\"code\",[s._v(\"sentinel monitor mymaster 127.0.0.1 6379 1\")])]),s._v(\" \"),t(\"p\",[s._v(\"其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。\")]),s._v(\" \"),t(\"p\",[s._v(\"3、启动哨兵\"),t(\"code\",[s._v(\"redis-sentinel /myredis/sentinel.conf\")])]),s._v(\" \"),t(\"p\",[s._v(\"4、将主机（6379端口）shutdown，查看哨兵日志\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6288d15009475431293eb19e.png\",alt:\"image-20220521194728081\"}})]),s._v(\" \"),t(\"p\",[s._v(\"5、原主机重新启动会变成从机。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"复制延迟\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#复制延迟\"}},[s._v(\"#\")]),s._v(\" 复制延迟\")]),s._v(\" \"),t(\"p\",[s._v(\"由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。\")]),s._v(\" \"),t(\"h4\",{attrs:{id:\"故障恢复\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#故障恢复\"}},[s._v(\"#\")]),s._v(\" 故障恢复\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/6288d1ac09475431293f08d1.png\",alt:\"image-20220521194858816\"}})]),s._v(\" \"),t(\"p\",[s._v(\"优先级在redis.conf中默认：slave-priority 100，值越小优先级越高\")]),s._v(\" \"),t(\"p\",[s._v(\"偏移量是指获得原主机数据最全的\")]),s._v(\" \"),t(\"p\",[s._v(\"每个redis实例启动后都会随机生成一个40位的runid\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"_12-redis集群\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-redis集群\"}},[s._v(\"#\")]),s._v(\" 12.Redis集群\")]),s._v(\" \"),t(\"p\",[s._v(\"容量不够，redis如何进行扩容？\")]),s._v(\" \"),t(\"p\",[s._v(\"并发写操作， redis如何分摊？\")]),s._v(\" \"),t(\"p\",[s._v(\"另外，主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。\")]),s._v(\" \"),t(\"p\",[s._v(\"之前通过代理主机来解决，但是redis3.0中提供了解决方案。就是无中心化集群配置。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"操作\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#操作\"}},[s._v(\"#\")]),s._v(\" 操作\")]),s._v(\" \"),t(\"p\",[s._v(\"制作6个实例，6379,6380,6381,6389,6390,6391\")]),s._v(\" \"),t(\"p\",[s._v(\"配置如下：开启daemonize yes，Appendonly 关掉或者换名字\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[s._v(\"include /root/myredis/redis.conf\\npidfile /var/run/redis_6379.pid\\nport \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\"\\ndbfilename dump6379.rdb\\ncluster-enabled \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"yes\")]),s._v(\"\\ncluster-config-file nodes-6379.conf\\ncluster-node-timeout \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"15000\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\")])]),t(\"p\",[s._v(\"cluster-enabled yes  打开集群模式\")]),s._v(\" \"),t(\"p\",[s._v(\"cluster-config-file nodes-6379.conf 设定节点配置文件名\")]),s._v(\" \"),t(\"p\",[s._v(\"cluster-node-timeout 15000  设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"启动6个redis服务\")])]),s._v(\" \"),t(\"p\",[s._v(\"检查nodes-####是否都正常\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628a6bf509475431298efe19.png\",alt:\"image-20220523005932623\"}})]),s._v(\" \"),t(\"p\",[s._v(\"合体：cd  /opt/redis-6.2.1/src\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[s._v(\"redis-cli --cluster create --cluster-replicas \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"192.168\")]),s._v(\".11.101:6379 \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"192.168\")]),s._v(\".11.101:6380 \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"192.168\")]),s._v(\".11.101:6381 \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"192.168\")]),s._v(\".11.101:6389 \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"192.168\")]),s._v(\".11.101:6390 \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"192.168\")]),s._v(\".11.101:6391\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[s._v(\"注：ip需要换成本机的\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"如果通讯端口为6379，那么集群总线端口16379一定要打开【重要】\")])]),s._v(\" \"),t(\"p\",[s._v(\"原因如下：\")]),s._v(\" \"),t(\"p\",[s._v(\"**redis集群总线：**redis集群总线端口为redis客户端端口加上10000，比如说你的redis 6379端口为客户端通讯端口，那么16379端口为集群总线端，如果不开放，便无法搭建集群\")]),s._v(\" \"),t(\"p\",[s._v(\"--replicas 1（表示一台主机搭配一台从机） 采用最简单的方式配置集群，一台主机，一台从机，正好三组。\")]),s._v(\" \"),t(\"p\",[s._v(\"可能直接进入读主机，存储数据时，会出现MOVED重定向操作。所以，应该以集群方式登录。\")]),s._v(\" \"),t(\"p\",[s._v(\"-c 采用集群策略连接，设置数据会自动切换到相应的写主机\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-bash line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[t(\"code\",[s._v(\"redis-cli -c -p \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"6379\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\")])]),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628a6cfd0947543129903859.png\",alt:\"image-20220523010357287\"}})]),s._v(\" \"),t(\"p\",[s._v(\"通过cluster nodes查询集群信息。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628a6d260947543129907298.png\",alt:\"image-20220523010438091\"}})]),s._v(\" \"),t(\"p\",[s._v(\"一个集群至少要有三个主节点。\")]),s._v(\" \"),t(\"p\",[s._v(\"选项 --cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。\")]),s._v(\" \"),t(\"p\",[s._v(\"分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"普通方式登录\")]),s._v(\" \"),t(\"p\",[s._v(\"可能直接进入读主机，存储数据时，会出现MOVED重定向操作。所以，应该以集群方式登录。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"-c  采用集群策略连接，当存入数据时会自动存到相应的写主机。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"通过 cluster nodes 命令查看集群信息\")]),s._v(\" \"),t(\"p\",[s._v(\"一个集群至少要有三个主节点。\")]),s._v(\" \"),t(\"p\",[s._v(\"选项 --cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。\")]),s._v(\" \"),t(\"p\",[s._v(\"分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。\")])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"插槽\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#插槽\"}},[s._v(\"#\")]),s._v(\" 插槽\")]),s._v(\" \"),t(\"p\",[s._v(\"一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， 集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。\")]),s._v(\" \"),t(\"p\",[s._v(\"集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"节点 A 负责处理 0 号至 5460 号插槽。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"节点 B 负责处理 5461 号至 10922 号插槽。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"节点 C 负责处理 10923 号至 16383 号插槽。\")])])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"在集群中录入值\")])]),s._v(\" \"),t(\"p\",[s._v(\"在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口。\")]),s._v(\" \"),t(\"p\",[s._v(\"redis-cli客户端提供了 –c 参数实现自动重定向。\")]),s._v(\" \"),t(\"p\",[s._v(\"如 redis-cli  -c –p 6379 登入后，再录入、查询键值对可以自动重定向。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628c5747094754312942d0fc.png\",alt:\"image-20220524115550578\"}})]),s._v(\" \"),t(\"p\",[s._v(\"不在一个slot下的键值，是不能使用mget,mset等多键操作。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628c575e094754312942eb7c.png\",alt:\"image-20220524115614156\"}})]),s._v(\" \"),t(\"p\",[s._v(\"可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628c5792094754312943259b.png\",alt:\"image-20220524115706466\"}})]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628c67d8094754312959508c.png\",alt:\"image-20220524130632632\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"查询集群中的值\")])]),s._v(\" \"),t(\"p\",[s._v(\"CLUSTER GETKEYSINSLOT \"),s._t(\"default\",(function(){return[t(\"count\",[s._v(\" 返回 count 个 slot 槽中的键。\")])]}))],2),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628c85490947543129849e95.png\",alt:\"image-20220524151208538\"}})]),s._v(\" \"),t(\"h3\",{attrs:{id:\"故障恢复-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#故障恢复-2\"}},[s._v(\"#\")]),s._v(\" 故障恢复\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"如果主节点下线，从节点自动升为主节点，注意：\"),t(\"strong\",[s._v(\"15秒超时\")])])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"主节点恢复后，主节点回来变成从机。\")])])]),s._v(\" \"),t(\"p\",[s._v(\"如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续?\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为yes ，那么 ，整个集群都挂掉\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为no ，那么，该插槽数据全都不能使用，也无法存储。\")])])]),s._v(\" \"),t(\"p\",[s._v(\"redis.conf中的参数  cluster-require-full-coverage\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"集群的不足\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集群的不足\"}},[s._v(\"#\")]),s._v(\" 集群的不足\")]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"多键操作是不被支持的 。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"多键的Redis事务是不被支持的，lua脚本不被支持。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。\")])])]),s._v(\" \"),t(\"h2\",{attrs:{id:\"_13-redis应用问题解决\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-redis应用问题解决\"}},[s._v(\"#\")]),s._v(\" 13.Redis应用问题解决\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"缓存穿透\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存穿透\"}},[s._v(\"#\")]),s._v(\" 缓存穿透\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"问题描述\")])]),s._v(\" \"),t(\"p\",[s._v(\"key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628c85fa094754312985a73b.png\",alt:\"image-20220524151505655\"}})]),s._v(\" \"),t(\"p\",[s._v(\"一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"解决方案：\")])]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"（1）\")]),s._v(\" **对空值缓存：**如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"（2）\")]),s._v(\" \"),t(\"strong\",[s._v(\"设置可访问的名单（白名单）：\")])]),s._v(\" \"),t(\"p\",[s._v(\"使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"（3）\")]),s._v(\" \"),t(\"strong\",[s._v(\"采用布隆过滤器\")]),s._v(\"：(布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。\")]),s._v(\" \"),t(\"p\",[s._v(\"布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。)\")]),s._v(\" \"),t(\"p\",[s._v(\"将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"（4）\")]),s._v(\" **进行实时监控：**当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"缓存击穿\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存击穿\"}},[s._v(\"#\")]),s._v(\" 缓存击穿\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"问题描述\")])]),s._v(\" \"),t(\"p\",[s._v(\"key对应的数存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628c8687094754312986800a.png\",alt:\"image-20220524151727167\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"解决方案\")])]),s._v(\" \"),t(\"p\",[s._v(\"key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。\")]),s._v(\" \"),t(\"p\",[s._v(\"解决问题：\")]),s._v(\" \"),t(\"p\",[s._v(\"**（1）预先设置热门数据：**在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长\")]),s._v(\" \"),t(\"p\",[s._v(\"**（2）实时调整：**现场监控哪些数据热门，实时调整key的过期时长\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"（3）使用锁：\")])]),s._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[s._v(\"就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db。\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628c88810947543129897d30.png\",alt:\"image-20220524152603224\"}})])])]),s._v(\" \"),t(\"h3\",{attrs:{id:\"缓存雪崩\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存雪崩\"}},[s._v(\"#\")]),s._v(\" 缓存雪崩\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"问题描述\")])]),s._v(\" \"),t(\"p\",[s._v(\"key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。\")]),s._v(\" \"),t(\"p\",[s._v(\"缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key\")]),s._v(\" \"),t(\"p\",[s._v(\"正常访问\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628c8c7509475431298f7640.jpg\",alt:\"img\"}})]),s._v(\" \"),t(\"p\",[s._v(\"缓存失效瞬间\")]),s._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://pic.imgdb.cn/item/628c8c8e09475431298fa086.png\",alt:\"image-20220524154310353\"}})]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"解决方案\")])]),s._v(\" \"),t(\"p\",[s._v(\"缓存失效时的雪崩效应对底层系统的冲击非常可怕！\")]),s._v(\" \"),t(\"p\",[s._v(\"解决方案：\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"（1）\")]),s._v(\" \"),t(\"strong\",[s._v(\"构建多级缓存架构\")]),s._v(\"nginx缓存 + redis缓存 +其他缓存（ehcache等）\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"（2）\")]),s._v(\" \"),t(\"strong\",[s._v(\"使用锁或队列\")])]),s._v(\" \"),t(\"p\",[s._v(\"用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"（3）\")]),s._v(\" \"),t(\"strong\",[s._v(\"设置过期标志更新缓存：\")])]),s._v(\" \"),t(\"p\",[s._v(\"记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"（4）\")]),s._v(\" \"),t(\"strong\",[s._v(\"将缓存失效时间分散开：\")])]),s._v(\" \"),t(\"p\",[s._v(\"比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。\")]),s._v(\" \"),t(\"h3\",{attrs:{id:\"分布式锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式锁\"}},[s._v(\"#\")]),s._v(\" 分布式锁\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"问题描述\")]),s._v(\"随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！\")]),s._v(\" \"),t(\"p\",[s._v(\"分布式锁主流的实现方案：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[t(\"p\",[s._v(\"基于数据库实现分布式锁\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"基于缓存（Redis等）\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"基于Zookeeper\")])])]),s._v(\" \"),t(\"p\",[s._v(\"每一种分布式锁解决方案都有各自的优缺点：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[t(\"p\",[s._v(\"性能：redis最高\")])]),s._v(\" \"),t(\"li\",[t(\"p\",[s._v(\"可靠性：zookeeper最高\")])])]),s._v(\" \"),t(\"p\",[s._v(\"这里，我们就基于redis实现分布式锁。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"解决方案，使用redis实现分布式锁\")])])])],1)}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}